y_min = details$y_min[details$section_id==section_id]
y_max = details$y_max[details$section_id==section_id]
y_max
x_min = int(details$x_min[details$section_id==section_id])
x_min = integer(details$x_min[details$section_id==section_id])
x_min = as.integer(details$x_min[details$section_id==section_id])
x_min = as.numeric(details$x_min[details$section_id==section_id])
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(spatial))
suppressPackageStartupMessages(library(sf))
# setting variables for testing
data.dir <- "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g"
x_min = 380
x_max = 2600
#y_min = 890
y_max = 1900
y_min = 890
section = '19_wt_r_0.8b'
file_details = "/Users/tell/Desktop/spatialtrans/xenium/xenium_file_details.csv"
section_id = '19_wt_r_0.8b'
cluster_folder = file.path(data.dir,"analysis","clustering","gene_expression_custom_clusters")
cluster_csv_orig = file.path(cluster_folder,paste0("clusters_orig_", section, ".csv"))
cluster_csv_final = file.path(cluster_folder,paste0("clusters_final_", section, ".csv"))
# loading the whole output folder from xenium
xenium.obj.orig <- LoadXenium(data.dir, fov = "fov")
xenium.obj <- xenium.obj.orig
# remove cells with zero counts
xenium.obj <- subset(xenium.obj.orig, subset = nCount_Xenium > 0)
ImageDimPlot(xenium.obj, axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
coord.fixed = TRUE, nmols = 10000, flip_xy = FALSE)
# *************************
# SELECTING ONLY SECTION
# *************************
print("About to crop")
cropped.coords <- Crop(xenium.obj[["fov"]], x = c(x_min,x_max), y = c(y_min, y_max), coords = "plot")
print("finished crop")
xenium.obj.section <- subset(xenium.obj, cells = Cells(cropped.coords))
xenium.obj.section[["fov"]] <- cropped.coords
ImageDimPlot(xenium.obj.section, fov = "fov",axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
coord.fixed = TRUE, nmols = 10000)
xenium.obj.section <- SCTransform(xenium.obj.section, assay = "Xenium")
xenium.obj.section <- RunPCA(xenium.obj.section, npcs = 30, features = rownames(xenium.obj.section))
xenium.obj.section <- RunUMAP(xenium.obj.section, dims = 1:30)
xenium.obj.section <- FindNeighbors(xenium.obj.section, reduction = "pca", dims = 1:30)
xenium.obj.section <- FindClusters(xenium.obj.section, resolution = 0.3)
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
coord.fixed = FALSE,  nmols = 10000)
xenium.obj.section <- SetIdent(xenium.obj.section, value = xenium.obj.section@meta.data$seurat_clusters)
pdf(paste0(section_id,"_clusters.pdf")
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
pdf(paste0(section_id,"_clusters.pdf"))
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
coord.fixed = FALSE,  nmols = 10000)
dev.off()
pdf(paste0(section_id,"_clusters.pdf"))
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "transparent", border.size = 0.1, cols = "polychrome",
coord.fixed = FALSE,  nmols = 10000)
dev.off()
pdf(paste0(section_id,"_clusters.pdf"))
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "transparent", border.size = 0.1, cols = "polychrome",
coord.fixed = FALSE,  nmols = 10000)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "transparent", border.size = 0.01, cols = "polychrome",
coord.fixed = FALSE,  nmols = 10000)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, border.color = "transparent", border.size = 0.01, cols = "polychrome",
coord.fixed = TRUE,  nmols = 10000)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,  nmols = 10000)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,  nmols = 10000)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,  nmols = 10000, flip_xy = TRUE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,  nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = FALSE, cols = "polychrome",
coord.fixed = TRUE,  nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,  nmols = 100, flip_xy = FALSE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, size = 0.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(data.dir,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, shuffle.cols = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
post_analysis_path = "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g/post_analysis"
pdf(file.path(post_analysis_path,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, shuffle.cols = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(post_analysis_path,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, shuffle.cols = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
View(xenium.obj.section)
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, boundaries = TRUE,shuffle.cols = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
DimPlot(xenium.obj.section)
PCAPlot(xenium.obj.section)
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE, shuffle.cols = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
PCAPlot(xenium.obj.section)
ImageDimPlot(xenium.obj.section, axes = TRUE, cols = "polychrome",
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
ImageDimPlot(xenium.obj.section, axes = TRUE,
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
pdf(file.path(post_analysis_path,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE,
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(post_analysis_path,paste0(section_id,"_pca.pdf")))
PCAPlot(xenium.obj.section)
dev.off()
UMAPPlot(xenium.obj.section)
pdf(file.path(post_analysis_path,paste0(section_id,"_umap.pdf")))
UMAPPlot(xenium.obj.section)
dev.off()
PCAPlot(xenium.obj.section,dims = c(1, 2,3))
data.dir <- "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g"
transcripts <- read.csv(file_path(data.dir,"transcripts.csv.gz")
transcripts <- read.csv(file_path(data.dir,"transcripts.csv.gz"))
transcripts <- read.csv(file_path(data.dir,gzfile("transcripts.csv.gz")))
transcripts <- read.csv(gzfile(file_path(data.dir,"transcripts.csv.gz")))
transcripts_gz <- gzfile(file_path(data_dir,"transcripts.csv.gz"),'rt')
transcripts <- read.csv(transcripts_gz)
suppressPackageStartupMessages(library(tidyverse))
transcripts_gz <- gzfile(file_path(data_dir,"transcripts.csv.gz"),'rt')
transcripts_gz <- gzfile(file.path(data_dir,"transcripts.csv.gz"),'rt')
data_dir <- "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g"
transcripts_gz <- gzfile(file.path(data_dir,"transcripts.csv.gz"),'rt')
transcripts <- read.csv(transcripts_gz)
transcripts <- read.csv(gzfile(file.path(data_dir,"transcripts.csv.gz"),'rt'))
View(transcripts)
cells <- read.csv(gzfile(file.path(data_dir,"cells.csv.gz"),'rt'))
View(cells)
cell_boundaries <- read.csv(gzfile(file.path(data_dir,"cell_boundaries.csv.gz"),'rt'))
View(cell_boundaries)
features <- read.csv(gzfile(file.path(data_dir,"cell_feature_matrix","features.tsv.gz"),'rt'))
View(features)
View(features)
features <- data.frame(gzfile(file.path(data_dir,"cell_feature_matrix","matrix.mtx.gz"),'rt'))
View(features)
features <- read.csv(gzfile(file.path(data_dir,"cell_feature_matrix","matrix.mtx.gz"),'rt'))
View(features)
View(cells)
View(cell_boundaries)
# here I'm following the tutorial from https://www.10xgenomics.com/analysis-guides/importing-customized-clustering-into-xenium-explorer
# to get a customized zarr file with our chosen clustering
cell_clusters_section <- as.data.frame(Idents(xenium.obj.section))
cell_clusters <- as.data.frame(Idents(xenium.obj.orig))
cell_clusters_all <- merge(cell_clusters,cell_clusters_section, by=0, all.x=TRUE)
cell_clusters_all$Barcode <- as.integer(rownames(cell_clusters_all))
cell_clusters_all$Cluster = cell_clusters_all[,3]
cell_clusters_all = cell_clusters_all[,4:5]
write.csv(cell_clusters_all, cluster_csv_orig, quote=FALSE, row.names = FALSE)
cluster_cell_char_section = read.csv(cluster_csv_orig, header=TRUE)
unassigned <- max(replace_na(cluster_cell_char_section$Cluster,0)) + 1
cluster_cell_char_section$Cluster <- replace_na(cluster_cell_char_section$Cluster,unassigned)
write.csv(cluster_cell_char_section, cluster_csv_final, quote=FALSE, row.names = F)
View(cell_clusters_section)
View(cell_clusters_all)
# here I'm following the tutorial from https://www.10xgenomics.com/analysis-guides/importing-customized-clustering-into-xenium-explorer
# to get a customized zarr file with our chosen clustering
cell_clusters_section <- as.data.frame(Idents(xenium.obj.section))
cell_clusters <- as.data.frame(Idents(xenium.obj.orig))
cell_clusters_all <- merge(cell_clusters,cell_clusters_section, by=0, all.x=TRUE)
cell_clusters_all$Barcode <- as.integer(rownames(cell_clusters_all))
cell_clusters_all$Cluster = cell_clusters_all[,3]
View(cell_clusters_section)
View(cell_clusters)
View(cell_clusters_all)
cell_cluster_with_name <- cell_clusters_all[,1,4:5]
cell_cluster_with_name <- cell_clusters_all[,c(1,4,5)]
View(cell_clusters_section)
View(cell_clusters_all)
View(cell_clusters)
View(cell_cluster_with_name)
cell_cluster_with_name <- rename(cell_cluster_with_name, Row.names = "Cell_id")
cell_cluster_with_name <- rename(cell_cluster_with_name, Cell_id = "Row.names")
write.csv(cell_clusters_with_name, file.path(post_analysis_path,"clusters.csv"), quote=FALSE, row.names = FALSE)
View(cell_clusters_all)
View(cell_boundaries)
View(cell_cluster_with_name)
View(cell_clusters)
View(cell_clusters_all)
suppressPackageStartupMessages(library(tidyverse))
data_dir <- "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g"
transcripts <- read.csv(gzfile(file.path(data_dir,"transcripts.csv.gz"),'rt'))
cells <- read.csv(gzfile(file.path(data_dir,"cells.csv.gz"),'rt'))
cell_boundaries <- read.csv(gzfile(file.path(data_dir,"cell_boundaries.csv.gz"),'rt'))
features <- read.csv(gzfile(file.path(data_dir,"cell_feature_matrix","matrix.mtx.gz"),'rt'))
View(features)
View(transcripts)
summary(transcripts$cell_id)
View(transcripts)
View(cells)
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(spatial))
suppressPackageStartupMessages(library(sf))
# setting variables for testing
data.dir <- "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g"
file_details = "/Users/tell/Desktop/spatialtrans/xenium/xenium_file_details.csv"
section_id = '19_wt_r_0.8b'
cluster_folder = file.path(data.dir,"analysis","clustering","gene_expression_custom_clusters")
cluster_csv_orig = file.path(cluster_folder,paste0("clusters_orig_", section_id, ".csv"))
cluster_csv_final = file.path(cluster_folder,paste0("clusters_final_", section_id, ".csv"))
post_analysis_path = "/Users/tell/Desktop/spatialtrans/xenium/data/0055468_wt-d5_r_0.2-0.8_b_g/post_analysis"
details <- read.csv(file_details)
x_min <- as.numeric(details$x_min[details$section_id==section_id])
x_max <- as.numeric(details$x_max[details$section_id==section_id])
y_min <- as.numeric(details$y_min[details$section_id==section_id])
y_max <- as.numeric(details$y_max[details$section_id==section_id])
# create transcripts.csv if it doesn't already exist.
# Older version of Xenium output included it, but with this version,
# we have to create it.
if(file.exists(file.path(data.dir,"transcripts.csv.gz"))){
print("The 'transcripts.csv.gz' already exists, no need to create it.")
} else {
transcripts <- read_parquet(file.path(data.dir, "transcripts.parquet"))
write.csv(transcripts, gzfile(file.path(data.dir, "transcripts.csv.gz")), row.names = FALSE)
}
# loading the whole output folder from xenium
xenium.obj.orig <- LoadXenium(data.dir, fov = "fov")
xenium.obj <- xenium.obj.orig
# remove cells with zero counts
xenium.obj <- subset(xenium.obj.orig, subset = nCount_Xenium > 0)
ImageDimPlot(xenium.obj, axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
coord.fixed = TRUE, nmols = 10000, flip_xy = FALSE)
# *************************
# SELECTING ONLY SECTION
# *************************
print("About to crop")
cropped.coords <- Crop(xenium.obj[["fov"]], x = c(x_min,x_max), y = c(y_min, y_max), coords = "plot")
print("finished crop")
xenium.obj.section <- subset(xenium.obj, cells = Cells(cropped.coords))
xenium.obj.section[["fov"]] <- cropped.coords
ImageDimPlot(xenium.obj.section, fov = "fov",axes = TRUE, border.color = "white", border.size = 0.1, cols = "polychrome",
coord.fixed = TRUE, nmols = 10000)
#DefaultBoundary(xenium.obj.section) <- "segmentation"
# *************************
#    CLUSTERING
# *************************
xenium.obj.section <- SCTransform(xenium.obj.section, assay = "Xenium")
xenium.obj.section <- RunPCA(xenium.obj.section, npcs = 30, features = rownames(xenium.obj.section))
xenium.obj.section <- RunUMAP(xenium.obj.section, dims = 1:30)
xenium.obj.section <- FindNeighbors(xenium.obj.section, reduction = "pca", dims = 1:30)
xenium.obj.section <- FindClusters(xenium.obj.section, resolution = 0.3)
# *************************
#  BASIC CLUSTER MAPS
# *************************
pdf(file.path(post_analysis_path,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE,
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(post_analysis_path,paste0(section_id,"_pca.pdf")))
PCAPlot(xenium.obj.section)
dev.off()
pdf(file.path(post_analysis_path,paste0(section_id,"_umap.pdf")))
UMAPPlot(xenium.obj.section)
dev.off()
# *************************
#    EXPORTING CLUSTERS
# *************************
xenium.obj.section <- SetIdent(xenium.obj.section, value = xenium.obj.section@meta.data$seurat_clusters)
print("Past Plots")
# here I'm following the tutorial from https://www.10xgenomics.com/analysis-guides/importing-customized-clustering-into-xenium-explorer
# to get a customized zarr file with our chosen clustering
cell_clusters_section <- as.data.frame(Idents(xenium.obj.section))
cell_clusters <- as.data.frame(Idents(xenium.obj.orig))
cell_clusters_all <- merge(cell_clusters,cell_clusters_section, by=0, all.x=TRUE)
cell_clusters_all$Barcode <- as.integer(rownames(cell_clusters_all))
cell_clusters_all$Cluster <- cell_clusters_all[,3]
cell_cluster_with_name <- cell_clusters_all[,c(1,4,5)]
cell_cluster_with_name <- rename(cell_cluster_with_name, Cell_id = "Row.names")
write.csv(cell_cluster_with_name, file.path(post_analysis_path,"clusters.csv"), quote=FALSE, row.names = FALSE)
cell_clusters_all <- cell_clusters_all[,4:5]
write.csv(cell_clusters_all, cluster_csv_orig, quote=FALSE, row.names = FALSE)
cluster_cell_char_section <- read.csv(cluster_csv_orig, header=TRUE)
unassigned <- max(replace_na(cluster_cell_char_section$Cluster,0)) + 1
cluster_cell_char_section$Cluster <- replace_na(cluster_cell_char_section$Cluster,unassigned)
write.csv(cluster_cell_char_section, cluster_csv_final, quote=FALSE, row.names = F)
GetAssayData(x, slot = "counts")
GetAssayData(xenium.obj.section, slot = "counts")
counts <- GetAssayData(xenium.obj.section, slot = "counts")
View(counts)
xenium.obj.section$group <- paste0(xenium.obj.section$sample, "_", Idents(x))
xenium.obj.section$group <- paste0(section_id, "_", Idents(x))
xenium.obj.section$group <- paste0(section_id, "_", Idents(xenium.obj.section))
counts <- GetAssayData(xenium.obj.section, slot = "counts")
groups <- unique(xenium.obj.section$group)
pb <- do.call(cbind, lapply(groups, function(g) {
Matrix::rowSums(counts[, xenium.obj.section$group == g, drop = FALSE])
}))
colnames(pb) <- groups
View(pb)
coldata <- data.frame(
group   = groups,
sample  = sub("_.*$", "", groups),
cluster = sub("^.*_", "", groups),
row.names = groups
)
View(coldata)
# 4) Minimal filtering (adjust to panel depth)
keep <- rowSums(pb >= 5) >= 2
pb <- pb[keep, , drop=FALSE]
View(pb)
# 5) DESeq2 with sample blocking (needs ≥2 biological replicates)
dds <- DESeqDataSetFromMatrix(countData = round(pb),
colData   = coldata,
design    = ~ sample + cluster)
suppressPackageStartupMessages(library(DESeq2))
# 5) DESeq2 with sample blocking (needs ≥2 biological replicates)
dds <- DESeqDataSetFromMatrix(countData = round(pb),
colData   = coldata,
design    = ~ sample + cluster)
dds <- DESeq(dds)
# 5) DESeq2 with sample blocking (needs ≥2 biological replicates)
dds <- DESeqDataSetFromMatrix(countData = round(pb),
colData   = coldata,
design    = ~ sample + cluster)
View(coldata)
View(pb)
counts_per_cluster <- do.call(cbind, lapply(groups, function(g) {
Matrix::rowSums(counts[, xenium.obj.section$group == g, drop = FALSE])
}))
View(counts_per_cluster)
colnames(counts_per_cluster) <- groups
View(counts_per_cluster)
test_counts <- GetAssayData(xenium.obj,slot = "counts")
View(test_counts)
GetAssayData(xenium.obj,slot = "counts")
xenium.obj$group
xenium.obj$cells
View(xenium.obj)
all_cells_counts <- GetAssayData(xenium.obj, slot = "counts")
View(all_cells_counts)
all_cells_counts <- as.data.frame(all_cells_counts)
write.csv(all_cells_counts, file.path(post_analysis_path,"counts_per_cell.csv"), quote=FALSE, row.names = FALSE)
View(all_cells_counts)
FindMarkers(xenium.obj.section)
FindMarkers(xenium.obj.section, ident.1 = 0)
num_clusters <- max(replace_na(cluster_cell_char_section$Cluster,0))
num_clusters <- max(Idents(xenium.obj.section))
# here I'm following the tutorial from https://www.10xgenomics.com/analysis-guides/importing-customized-clustering-into-xenium-explorer
# to get a customized zarr file with our chosen clustering
cell_clusters_section <- as.data.frame(Idents(xenium.obj.section))
cell_clusters <- as.data.frame(Idents(xenium.obj.orig))
cell_clusters_all <- merge(cell_clusters,cell_clusters_section, by=0, all.x=TRUE)
cell_clusters_all$Barcode <- as.integer(rownames(cell_clusters_all))
cell_clusters_all$Cluster <- cell_clusters_all[,3]
cell_cluster_with_name <- cell_clusters_all[,c(1,4,5)]
cell_cluster_with_name <- rename(cell_cluster_with_name, Cell_id = "Row.names")
write.csv(cell_cluster_with_name, file.path(post_analysis_path,"clusters.csv"), quote=FALSE, row.names = FALSE)
cell_clusters_all <- cell_clusters_all[,4:5]
write.csv(cell_clusters_all, cluster_csv_orig, quote=FALSE, row.names = FALSE)
cluster_cell_char_section <- read.csv(cluster_csv_orig, header=TRUE)
num_clusters <- max(replace_na(cluster_cell_char_section$Cluster,0))
unassigned <- max(replace_na(cluster_cell_char_section$Cluster,0)) + 1
cluster_cell_char_section$Cluster <- replace_na(cluster_cell_char_section$Cluster,unassigned)
write.csv(cluster_cell_char_section, cluster_csv_final, quote=FALSE, row.names = F)
for cluster in [0:num_clusters]:
for cluster in [0:as.numeric(num_clusters)]:
as.numeric(num_clusters)
for cluster in [0:8]:
for cluster in [0:8]
for (cluster in [0:8])
for (cluster in [0:8]):
for (cluster in 0:8) {}
for (cluster in 0:8) {
print(cluster)
}
for (cluster in 0:as.numeric(num_clusters)) {
print(cluster)
}
FindMarkers(xenium.obj.section, ident.1 = 0, ident.2 = 1)
FindMarkers(xenium.obj.section, ident.1 = 0)
marker
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster, ident.2 = comp)
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster, ident.2 = 1)
View(marker)
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
View(marker)
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
View(marker)
marker <- marker %<% filter(marker$p_val_adj > 0.05)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
View(marker)
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(spatial))
suppressPackageStartupMessages(library(sf))
for (cluster in 0:as.numeric(num_clusters)) {
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path,markers + "_" + cluster ".csv")
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path,markers + "_" + cluster ".csv"))
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, markers + "_" + cluster ".csv"))
o
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, marker + "_" + cluster ".csv"))
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, "markers_" + cluster ".csv"))
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, "markers_" + cluster + ".csv"))
}
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, "markers_" + as.string(cluster) + ".csv"))
}
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, "markers_" + as_string(cluster) + ".csv"))
}
o
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, "markers_" + as.integer(cluster) + ".csv"))
}
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, paste0("markers_",cluster, ".csv")))
}
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj > 0.05)
write.csv(marker, file.path(post_analysis_path, section_id, paste0("markers_",cluster, ".csv")))
}
View(marker)
for (cluster in 0:as.numeric(num_clusters)) {
marker <- FindMarkers(xenium.obj.section, ident.1 = cluster)
marker <- marker %>% filter(marker$p_val_adj < 0.05)
write.csv(marker, file.path(post_analysis_path, section_id, paste0("markers_",cluster, ".csv")))
}
max(replace_na(cluster_cell_char_section$Cluster,0))
View(xenium.obj.section)
xenium.obj.section@meta.data[["seurat_clusters"]]
#DefaultBoundary(xenium.obj.section) <- "segmentation"
# *************************
#    CLUSTERING
# *************************
xenium.obj.section <- SCTransform(xenium.obj.section, assay = "Xenium")
xenium.obj.section <- RunPCA(xenium.obj.section, npcs = 30, features = rownames(xenium.obj.section))
xenium.obj.section <- RunUMAP(xenium.obj.section, dims = 1:30)
xenium.obj.section <- FindNeighbors(xenium.obj.section, reduction = "pca", dims = 1:30)
xenium.obj.section <- FindClusters(xenium.obj.section, resolution = 0.3)
xenium.obj.section <- SetIdent(xenium.obj.section, value = xenium.obj.section@meta.data$seurat_clusters)
# *************************
#  BASIC CLUSTER MAPS
# *************************
pdf(file.path(post_analysis_path,paste0(section_id,"_clusters.pdf")))
ImageDimPlot(xenium.obj.section, axes = TRUE,
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
dev.off()
pdf(file.path(post_analysis_path,paste0(section_id,"_pca.pdf")))
PCAPlot(xenium.obj.section)
dev.off()
pdf(file.path(post_analysis_path,paste0(section_id,"_umap.pdf")))
UMAPPlot(xenium.obj.section)
dev.off()
# *************************
#  BASIC CLUSTER MAPS
# *************************
ImageDimPlot(xenium.obj.section, axes = TRUE,
coord.fixed = TRUE,size = 1.5, border.size = NULL, nmols = 10000, flip_xy = FALSE)
